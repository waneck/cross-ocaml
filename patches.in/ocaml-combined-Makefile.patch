OCaml sources uses separate Makefile and Makefile.nt in each directory,
which is a pain when cross-compiling.  Instead of that, it's better to
combine all objects into one Makefile, and make sure the source is
defended by #ifdef/#ifndef WIN32 ... #endif, around the whole files as
necessary.

Index: mingw-ocaml/build/ocaml/asmrun/Makefile
===================================================================
--- mingw-ocaml.orig/build/ocaml/asmrun/Makefile	2013-10-13 08:35:04.000000000 -0300
+++ mingw-ocaml/build/ocaml/asmrun/Makefile	2013-10-13 08:45:27.000000000 -0300
@@ -24,7 +24,7 @@
   misc.o freelist.o major_gc.o minor_gc.o memory.o alloc.o compare.o ints.o \
   floats.o str.o array.o io.o extern.o intern.o hash.o sys.o parsing.o \
   gc_ctrl.o terminfo.o md5.o obj.o lexing.o printexc.o callback.o weak.o \
-  compact.o finalise.o custom.o unix.o backtrace.o natdynlink.o debugger.o \
+  compact.o finalise.o custom.o unix.o win32.o backtrace.o natdynlink.o debugger.o \
   meta.o dynlink.o
 
 ASMOBJS=$(ARCH).o
@@ -154,6 +154,8 @@
 	ln -s ../byterun/globroots.c globroots.c
 unix.c: ../byterun/unix.c
 	ln -s ../byterun/unix.c unix.c
+win32.c: ../byterun/win32.c
+	ln -s ../byterun/win32.c win32.c
 dynlink.c: ../byterun/dynlink.c
 	ln -s ../byterun/dynlink.c dynlink.c
 signals.c: ../byterun/signals.c
@@ -164,7 +166,7 @@
 LINKEDFILES=misc.c freelist.c major_gc.c minor_gc.c memory.c alloc.c array.c \
   compare.c ints.c floats.c str.c io.c extern.c intern.c hash.c sys.c \
   parsing.c gc_ctrl.c terminfo.c md5.c obj.c lexing.c printexc.c callback.c \
-  weak.c compact.c finalise.c meta.c custom.c main.c globroots.c unix.c \
+  weak.c compact.c finalise.c meta.c custom.c main.c globroots.c unix.c win32.c \
   dynlink.c signals.c debugger.c
 
 clean::
Index: mingw-ocaml/build/ocaml/byterun/Makefile.common
===================================================================
--- mingw-ocaml.orig/build/ocaml/byterun/Makefile.common	2013-10-13 08:35:04.000000000 -0300
+++ mingw-ocaml/build/ocaml/byterun/Makefile.common	2013-10-13 08:45:27.000000000 -0300
@@ -22,7 +22,7 @@
   compare.o ints.o floats.o str.o array.o io.o extern.o intern.o \
   hash.o sys.o meta.o parsing.o gc_ctrl.o terminfo.o md5.o obj.o \
   lexing.o callback.o debugger.o weak.o compact.o finalise.o custom.o \
-  dynlink.o
+  dynlink.o win32.o
 
 PRIMS=\
   alloc.c array.c compare.c extern.c floats.c gc_ctrl.c hash.c \
Index: mingw-ocaml/build/ocaml/byterun/unix.c
===================================================================
--- mingw-ocaml.orig/build/ocaml/byterun/unix.c	2013-10-13 08:35:04.000000000 -0300
+++ mingw-ocaml/build/ocaml/byterun/unix.c	2013-10-13 08:45:27.000000000 -0300
@@ -13,6 +13,8 @@
 
 /* Unix-specific stuff */
 
+#ifndef WIN32
+
 #define _GNU_SOURCE
            /* Helps finding RTLD_DEFAULT in glibc */
 
@@ -322,3 +324,5 @@
 }
 
 #endif
+
+#endif /* !WIN32 */
Index: mingw-ocaml/build/ocaml/byterun/win32.c
===================================================================
--- mingw-ocaml.orig/build/ocaml/byterun/win32.c	2013-10-13 08:35:04.000000000 -0300
+++ mingw-ocaml/build/ocaml/byterun/win32.c	2013-10-13 16:35:18.009686889 -0300
@@ -11,6 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
+#ifdef WIN32
+
 /* Win32-specific stuff */
 
 #include <windows.h>
@@ -502,3 +504,5 @@
 }
 
 #endif
+
+#endif
Index: mingw-ocaml/build/ocaml/otherlibs/systhreads/Makefile
===================================================================
--- mingw-ocaml.orig/build/ocaml/otherlibs/systhreads/Makefile	2013-10-13 08:35:17.000000000 -0300
+++ mingw-ocaml/build/ocaml/otherlibs/systhreads/Makefile	2013-10-13 16:35:21.621686891 -0300
@@ -13,77 +13,75 @@
 
 include ../../config/Makefile
 
-CAMLC=../../ocamlcomp.sh -I ../win32unix -I ../unix
-CAMLOPT=../../ocamlcompopt.sh -I ../win32unix -I ../unix
+# Compilation options
+CAMLC=../../boot/ocamlrun ../../ocamlc -I ../../stdlib -I ../win32unix
+CAMLOPT=../../boot/ocamlrun ../../ocamlopt -I ../../stdlib -I ../win32unix
+COMPFLAGS=-w +33 -warn-error A -g
 MKLIB=../../boot/ocamlrun ../../tools/ocamlmklib
-COMPFLAGS=-w +33..39 -warn-error A -g
+CFLAGS=-I../../byterun $(EXTRACFLAGS)
 
-BYTECODE_C_OBJS=st_stubs_b.o
-NATIVECODE_C_OBJS=st_stubs_n.o
+CAMLOBJS=thread.cmo mutex.cmo condition.cmo event.cmo threadUnix.cmo
+CMIFILES=$(CAMLOBJS:.cmo=.cmi)
+COBJS=st_stubs_b.$(O)
+COBJS_NAT=st_stubs_n.$(O)
 
-THREAD_OBJS= thread.cmo mutex.cmo condition.cmo event.cmo threadUnix.cmo
+LIBNAME=threads
 
-all: libthreads.a threads.cma
+all: lib$(LIBNAME).$(A) $(LIBNAME).cma $(CMIFILES)
 
-allopt: libthreadsnat.a threads.cmxa
+allopt: lib$(LIBNAME).$(A) $(LIBNAME).cmxa $(LIBNAME).cmxs $(CMIFILES)
 
-libthreads.a: $(BYTECODE_C_OBJS)
-	$(MKLIB) -o threads $(BYTECODE_C_OBJS) -lpthread
+$(LIBNAME).cma: $(CAMLOBJS)
+	$(MKLIB) -o $(LIBNAME) -ocamlc "../../boot/ocamlrun ../../ocamlc" \
+	         -linkall $(CAMLOBJS) $(LINKOPTS)
 
-st_stubs_b.o: st_stubs.c st_posix.h
-	$(BYTECC) -O -I../../byterun $(BYTECCCOMPOPTS) $(SHAREDCCCOMPOPTS) \
-	   -c st_stubs.c
-	mv st_stubs.o st_stubs_b.o
+lib$(LIBNAME).$(A): $(COBJS)
+	$(MKLIB) -o $(LIBNAME) $(COBJS) $(LDOPTS)
 
-# Dynamic linking with -lpthread is risky on many platforms, so
-# do not create a shared object for libthreadsnat.
-libthreadsnat.a: $(NATIVECODE_C_OBJS)
-	$(AR) rc libthreadsnat.a $(NATIVECODE_C_OBJS)
+st_stubs_b.$(O): st_stubs.c st_win32.h
+	$(BYTECC) $(BYTECCCOMPOPTS) $(CFLAGS) -c st_stubs.c
+	mv st_stubs.$(O) st_stubs_b.$(O)
 
-st_stubs_n.o: st_stubs.c st_posix.h
-	$(NATIVECC) -O -I../../asmrun -I../../byterun $(NATIVECCCOMPOPTS) \
-	            $(SHAREDCCCOMPOPTS) -DNATIVE_CODE -DTARGET_$(ARCH) \
-	            -DSYS_$(SYSTEM) -c st_stubs.c
-	mv st_stubs.o st_stubs_n.o
 
-threads.cma: $(THREAD_OBJS)
-	$(MKLIB) -ocamlc '$(CAMLC)' -o threads $(THREAD_OBJS) \
-	  -cclib -lunix $(PTHREAD_LINK)
 
-# See remark above: force static linking of libthreadsnat.a
-threads.cmxa: $(THREAD_OBJS:.cmo=.cmx)
-	$(CAMLOPT) -a -o threads.cmxa $(THREAD_OBJS:.cmo=.cmx) \
-	  -cclib -lthreadsnat $(PTHREAD_LINK)
+$(LIBNAME).cmxa: $(CAMLOBJS:.cmo=.cmx)
+	$(MKLIB) -o $(LIBNAME)nat \
+	         -ocamlopt "../../boot/ocamlrun ../../ocamlopt" -linkall \
+	         $(CAMLOBJS:.cmo=.cmx) $(LINKOPTS)
+	mv $(LIBNAME)nat.cmxa $(LIBNAME).cmxa
+	mv $(LIBNAME)nat.$(A) $(LIBNAME).$(A)
 
-# Note: I removed "-cclib -lunix" from the line above.
-# Indeed, if we link threads.cmxa, then we must also link unix.cmxa,
-# which itself will pass -lunix to the C linker.  It seems more
-# modular to me this way. -- Alain
+$(LIBNAME).cmxs: $(LIBNAME).cmxa lib$(LIBNAME)nat.$(A)
+	$(CAMLOPT) -shared -o $(LIBNAME).cmxs -I . $(LIBNAME).cmxa -linkall
 
+lib$(LIBNAME)nat.$(A): $(COBJS_NAT)
+	$(MKLIB) -o $(LIBNAME)nat $(COBJS_NAT) $(LDOPTS)
 
-$(THREAD_OBJS:.cmo=.cmx): ../../ocamlopt
+st_stubs_n.$(O): st_stubs.c st_win32.h
+	$(NATIVECC) -DNATIVE_CODE -I../../asmrun -I../../byterun \
+	            $(NATIVECCCOMPOPTS) -c st_stubs.c
+	mv st_stubs.$(O) st_stubs_n.$(O)
+
+$(CAMLOBJS:.cmo=.cmx): ../../ocamlopt
 
 partialclean:
 	rm -f *.cm*
 
 clean: partialclean
-	rm -f *.o *.a *.so
+	rm -f *.dll *.$(A) *.$(O)
 
 install:
-	if test -f dllthreads.so; then cp dllthreads.so $(STUBLIBDIR)/dllthreads.so; fi
-	cp libthreads.a $(LIBDIR)/libthreads.a
-	cd $(LIBDIR); $(RANLIB) libthreads.a
-	if test -d $(LIBDIR)/threads; then :; else mkdir $(LIBDIR)/threads; fi
-	cp $(THREAD_OBJS:.cmo=.cmi) threads.cma $(LIBDIR)/threads
+	cp dllthreads.dll $(STUBLIBDIR)/dllthreads.dll
+	cp libthreads.$(A) $(LIBDIR)/libthreads.$(A)
+	mkdir -p $(LIBDIR)/threads
+	cp $(CMIFILES) threads.cma $(LIBDIR)/threads
 	rm -f $(LIBDIR)/threads/stdlib.cma
-	cp thread.mli mutex.mli condition.mli event.mli threadUnix.mli $(LIBDIR)
 	cp threads.h $(LIBDIR)/caml/threads.h
 
 installopt:
-	cp libthreadsnat.a $(LIBDIR)/libthreadsnat.a
-	cd $(LIBDIR); $(RANLIB) libthreadsnat.a
-	cp $(THREAD_OBJS:.cmo=.cmx) threads.cmxa threads.a $(LIBDIR)/threads
-	cd $(LIBDIR)/threads; $(RANLIB) threads.a
+	cp libthreadsnat.$(A) $(LIBDIR)/libthreadsnat.$(A)
+	cp $(THREAD_OBJS:.cmo=.cmx) threads.cmxa threads.$(A) $(LIBDIR)/threads
+	cp threads.cmxs $(LIBDIR)/threads
 
 .SUFFIXES: .ml .mli .cmo .cmi .cmx
 
@@ -91,13 +89,11 @@
 	$(CAMLC) -c $(COMPFLAGS) $<
 
 .ml.cmo:
-	$(CAMLC) -c $(COMPFLAGS) $<
+	$(CAMLC) -c -g $(COMPFLAGS) $<
 
 .ml.cmx:
 	$(CAMLOPT) -c $(COMPFLAGS) $<
 
-depend: $(GENFILES)
-	-gcc -MM -I../../byterun *.c > .depend
-	../../boot/ocamlrun ../../tools/ocamldep *.mli *.ml >> .depend
+depend:
 
 include .depend
